{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.scss","components/Section/Section.module.scss","redux/feedback/feedback-actions.js","redux/feedback/feedback-reducer.js","redux/store.js","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/FeedbackOptions/FeedbackOptions.container.jsx","components/StatisticsTotal/StatisticsTotal.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/Statistics/Statistics.container.jsx","App.jsx","index.js","components/Statistics/Statistics.module.scss","components/StatisticsTotal/StatisticsTotal.module.scss"],"names":["module","exports","onLeaveFeedback","createAction","feedbackReducer","createReducer","good","neutral","bad","state","payload","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","combineReducers","feedback","feedbackpersistConfig","key","storage","sessionStorage","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","Section","title","children","className","styles","section","defaultProps","FeedbackOptions","list","Object","keys","map","btnName","item","button","type","onClick","connect","dispatch","event","actions","target","textContent","StatisticsTotal","total","percent","value","Notification","message","Statistics","getTotalFeedback","reduce","acc","goodFeedback","totalFeedback","Math","round","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2af5ae35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__KuO6m\",\"item\":\"FeedbackOptions_item__2KOQV\",\"button\":\"FeedbackOptions_button__T3ODe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2buFW\",\"title\":\"Section_title__2YTxH\"};","import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена\r\n\r\n// Функция создания обьекта экшена, со свойством type (строка) и свойством value (payload).\r\n// Если нужны манипуляции с обьектом, тогда использует Prepare Callback\r\nexport const onLeaveFeedback = createAction('counter/onLeaveFeedback');\r\n","import { createReducer } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\r\nimport {onLeaveFeedback} from './feedback-actions'; // Импорт названия экшена\r\n\r\n// Изначальный стейт обьекта федбеков\r\nconst feedbackInitialState = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n};\r\n\r\n// Редюсер фидбеков\r\nconst feedbackReducer = createReducer(feedbackInitialState, {\r\n  [onLeaveFeedback]: (state, { payload }) =>\r\n    void {\r\n      ...state,\r\n      [payload]: (state[payload] += 1),\r\n    },\r\n});\r\n\r\nexport default feedbackReducer;\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'; // Функциии для работы с локальными и сессиями + игнор ворнинга в консоли\r\nimport sessionStorage from 'redux-persist/lib/storage/session'; // Импорт сессионного хранилища\r\n\r\n// Редюсер по фидбекам\r\nimport feedbackReducer from './feedback/feedback-reducer';\r\n\r\n// Прослойки\r\nconst middleware = {\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n};\r\n\r\n// Корневой редюсер\r\nconst rootReducer = combineReducers({\r\n  feedback: feedbackReducer,\r\n});\r\n\r\n// Конфиг персистора\r\nconst feedbackpersistConfig = {\r\n  key: 'feedback',\r\n  storage: sessionStorage,\r\n};\r\n\r\n// Персист редюсер (можно упростить, но нужно отловить баг)\r\nconst persistedReducer = persistReducer(feedbackpersistConfig, rootReducer);\r\n\r\n// Создает хранилище + корневой редюсер + тулзами только для разработки\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\n// Обёртка над стором\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line\r\nexport default { store, persistor };\r\n","import PropTypes from 'prop-types';\n\nimport styles from './Section.module.scss';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={styles.section}>\n      <h1 className={styles.title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.defaultProps = {\n  title: '',\n  children: [],\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nimport styles from './FeedbackOptions.module.scss';\n\n// Компонент кнопок для отзывов\nconst FeedbackOptions = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <ul className={styles.list}>\n      {Object.keys(feedback).map(btnName => {\n        return (\n          <li className={styles.item} key={btnName}>\n            <button\n              className={styles.button}\n              type=\"button\"\n              onClick={onLeaveFeedback}\n            >\n              {btnName}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  feedback: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import { connect } from 'react-redux'; // Импорт функции конекта к глобальному хранилищу\r\nimport * as actions from '../../redux/feedback/feedback-actions'; // Импорт всех экшенов из папки фидбека\r\n\r\nimport FeedbackOptions from './FeedbackOptions'; // Импорт компонента в контейнер\r\n\r\n// Из стейта в пропы\r\nconst mapStateToProps = state => ({\r\n  feedback: state.feedback,\r\n});\r\n\r\n// Из стейта в пропы для методов\r\nconst mapDispatchToProps = dispatch => ({\r\n  onLeaveFeedback: event =>\r\n    dispatch(actions.onLeaveFeedback(event.target.textContent)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedbackOptions);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './StatisticsTotal.module.scss';\r\n\r\n// Компонент результата подсчёта отзывов\r\nconst StatisticsTotal = ({ total, percent }) => {\r\n  return (\r\n    <div>\r\n      <p className={styles.item}>\r\n        Total: <span className={styles.value}>{total}</span>\r\n      </p>\r\n      <p className={styles.item}>\r\n        Positive feedback: <span className={styles.value}>{percent}%</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatisticsTotal.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  percent: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default StatisticsTotal;\r\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.defaultProps = {\n  message: '',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\r\nimport StatisticsTotal from '../StatisticsTotal';\r\nimport Notification from '../Notification';\r\n\r\nimport styles from './Statistics.module.scss';\r\n\r\n// Компонент списка отзывов\r\nconst Statistics = ({ feedback, total, percent }) => {\r\n  return (\r\n    <>\r\n      {total ? (\r\n        <>\r\n          <ul className={styles.list}>\r\n            <li className={styles.item}>\r\n              <p>\r\n                Good: <span className={styles.value}>{feedback.good}</span>\r\n              </p>\r\n            </li>\r\n            <li className={styles.item}>\r\n              <p>\r\n                Neutral:{' '}\r\n                <span className={styles.value}>{feedback.neutral}</span>\r\n              </p>\r\n            </li>\r\n            <li className={styles.item}>\r\n              <p>\r\n                Bad: <span className={styles.value}>{feedback.bad}</span>\r\n              </p>\r\n            </li>\r\n          </ul>\r\n          <StatisticsTotal total={total} percent={percent} />\r\n        </>\r\n      ) : (\r\n        <Notification message={'No feedback given'} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  feedback: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }),\r\n};\r\n\r\nexport default Statistics;\r\n","import { connect } from 'react-redux'; // Импорт функции конекта к глобальному хранилищу\r\nimport Statistics from './Statistics' // Импорт компонента в контейнер\r\n\r\n// Считает общее количество отзывов\r\nconst getTotalFeedback = state =>\r\n  Object.keys(state).reduce((acc, value) => acc + state[value], 0);\r\n\r\n// Считает процент хороших отзывов\r\nconst getPositivePercent = (goodFeedback, totalFeedback) =>\r\n  Math.round((goodFeedback / totalFeedback) * 100 || null);\r\n\r\n// Из стейта в пропы\r\nconst mapStateToProps = state => ({\r\n  feedback: state.feedback,\r\n  total: getTotalFeedback(state.feedback),\r\n  percent: getPositivePercent(\r\n    state.feedback.good,\r\n    getTotalFeedback(state.feedback),\r\n  ),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Statistics);","import Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\n\nconst App = () => {\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics />\n      </Section>\n    </>\n  );\n};\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport store from './redux/store'; // Обьект с методами, экземпляр редакса\nimport { Provider } from 'react-redux'; // Провайдер для доступности хранилища везде\nimport { PersistGate } from 'redux-persist/integration/react'; // Обёртка для локального и сесионного хранилища\n\nimport App from './App.jsx';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './App.module.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3QJUd\",\"item\":\"Statistics_item__1Z_cN\",\"value\":\"Statistics_value__3RRWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StatisticsTotal_item__BTr-x\",\"value\":\"StatisticsTotal_value__WcZxt\"};"],"sourceRoot":""}